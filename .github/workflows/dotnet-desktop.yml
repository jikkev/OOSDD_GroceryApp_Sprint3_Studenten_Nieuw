# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: CI - MAUI (Windows)

on:
  push:
    branches: [ "Development", "development", "Main", "main" ]
  pull_request:
    branches: [ "Development", "development", "Main", "main" ]

env:
  SOLUTION_PATH: Grocery.sln
  TEST_PROJECT_PATH: TestCore/TestCore.csproj
  MAUI_PROJECT_PATH: Grocery.App/Grocery.App.csproj
  WINDOWS_TFM: net8.0-windows10.0.19041.0

jobs:
  tests:
    name: Build & Test
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [ Debug, Release ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore (solution)
        run: dotnet restore "${{ env.SOLUTION_PATH }}"

      - name: Build tests (${{ matrix.configuration }})
        run: dotnet build "${{ env.TEST_PROJECT_PATH }}" -c "${{ matrix.configuration }}" --no-restore

      - name: Run tests (${{ matrix.configuration }})
        run: dotnet test "${{ env.TEST_PROJECT_PATH }}" -c "${{ matrix.configuration }}" --no-build --logger trx --results-directory "${{ runner.temp }}\\testresults"

      - name: Upload test results (${{ matrix.configuration }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.configuration }}
          path: ${{ runner.temp }}\testresults

  package_windows:
    name: Windows MSIX (Main only)
    runs-on: windows-latest
    needs: tests
    if: ${{ github.ref_name == 'main' || github.ref_name == 'Main' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI workload
        run: dotnet workload install maui

      # Zorg dat we alleen Windows targeten en geen andere workloads nodig hebben
      - name: Publish MSIX (Release)
        run: >
          dotnet publish "${{ env.MAUI_PROJECT_PATH }}"
          -c Release
          -f ${{ env.WINDOWS_TFM }}
          -p:WindowsPackageType=MSIX
          -p:AppxBundle=Always
          -p:UapAppxPackageBuildMode=StoreUpload
          -p:GenerateAppxPackageOnBuild=true
          -p:AppxPackageSigningEnabled=false

      - name: Upload MSIX artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msix-windows
          path: "Grocery.App\\bin\\Release\\${{ env.WINDOWS_TFM }}\\win10-*\\AppPackages\\**\\*"
